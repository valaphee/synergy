/* AUTO-GENERATED FILE. DO NOT MODIFY.
 */
syntax = "proto2";

package bgs.protocol.channel.v1;

import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/channel_types.proto";
import "bgs/low/pb/client/rpc_types.proto";

option java_multiple_files = true;
option java_generic_services = true;

option cc_generic_services = false;

message RemoveMemberRequest {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.EntityId member_id = 2;
  optional uint32 reason = 3;
}

message SendMessageRequest {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.channel.v1.Message message = 2;
  optional uint64 required_privileges = 3 [default = 0];
}

message UpdateChannelStateRequest {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.channel.v1.ChannelState state_change = 2;
}

message UpdateMemberStateRequest {
  optional .bgs.protocol.EntityId agent_id = 1;
  repeated .bgs.protocol.channel.v1.Member state_change = 2;
  repeated uint32 removed_role = 3 [packed = true];
}

message DissolveRequest {
  optional .bgs.protocol.EntityId agent_id = 1;
  optional uint32 reason = 2;
}

message JoinNotification {
  optional .bgs.protocol.channel.v1.Member self = 1;
  repeated .bgs.protocol.channel.v1.Member member = 2;
  required .bgs.protocol.channel.v1.ChannelState channel_state = 3;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 4;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 5;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 6;
}

message MemberAddedNotification {
  required .bgs.protocol.channel.v1.Member member = 1;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 2;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 3;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 100;
}

message LeaveNotification {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.EntityId member_id = 2 [deprecated = true];
  optional uint32 reason = 3;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 4;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 5;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 100;
}

message MemberRemovedNotification {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.EntityId member_id = 2;
  optional uint32 reason = 3;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 4;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 5;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 100;
}

message SendMessageNotification {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.channel.v1.Message message = 2;
  optional uint64 required_privileges = 3 [default = 0];
  optional string battle_tag = 4;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 5;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 6;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 100;
}

message UpdateChannelStateNotification {
  optional .bgs.protocol.EntityId agent_id = 1;
  required .bgs.protocol.channel.v1.ChannelState state_change = 2;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 3;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 4;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 5;
}

message UpdateMemberStateNotification {
  optional .bgs.protocol.EntityId agent_id = 1;
  repeated .bgs.protocol.channel.v1.Member state_change = 2;
  optional .bgs.protocol.channel.v1.ChannelId channel_id = 4;
  optional .bgs.protocol.channel.v1.SubscriberId subscriber_id = 5;
  optional .bgs.protocol.account.v1.AccountId presence_subscriber_id = 100;
}

service ChannelService {
  option (service_options).descriptor_name = "bnet.protocol.channel.Channel";
  option (service_options).shard_name = "channel";
  option (service_options).resolve_client_instance = true;
  option (service_options).is_global = false;
  option (sdk_service_options).outbound = true;
  
  rpc RemoveMember (.bgs.protocol.channel.v1.RemoveMemberRequest) returns (.bgs.protocol.NoData) {
    option (method_options).id = 2;
    option (method_options).client_identity_routing = CLIENT_IDENTITY_ROUTING_INSTANCE_ID;
    option (method_options).forward_key = "bgs.protocol.arcane.channel.ChannelIdForwardKey";
  }
  
  rpc SendMessage (.bgs.protocol.channel.v1.SendMessageRequest) returns (.bgs.protocol.NoData) {
    option (method_options).id = 3;
    option (method_options).client_identity_routing = CLIENT_IDENTITY_ROUTING_INSTANCE_ID;
    option (method_options).forward_key = "bgs.protocol.arcane.channel.ChannelIdForwardKey";
  }
  
  rpc UpdateChannelState (.bgs.protocol.channel.v1.UpdateChannelStateRequest) returns (.bgs.protocol.NoData) {
    option (method_options).id = 4;
    option (method_options).client_identity_routing = CLIENT_IDENTITY_ROUTING_INSTANCE_ID;
    option (method_options).forward_key = "bgs.protocol.arcane.channel.ChannelIdForwardKey";
  }
  
  rpc UpdateMemberState (.bgs.protocol.channel.v1.UpdateMemberStateRequest) returns (.bgs.protocol.NoData) {
    option (method_options).id = 5;
    option (method_options).client_identity_routing = CLIENT_IDENTITY_ROUTING_INSTANCE_ID;
    option (method_options).forward_key = "bgs.protocol.arcane.channel.ChannelIdForwardKey";
  }
  
  rpc Dissolve (.bgs.protocol.channel.v1.DissolveRequest) returns (.bgs.protocol.NoData) {
    option (method_options).id = 6;
    option (method_options).client_identity_routing = CLIENT_IDENTITY_ROUTING_INSTANCE_ID;
    option (method_options).forward_key = "bgs.protocol.arcane.channel.ChannelIdForwardKey";
  }
}

service ChannelListener {
  option (service_options).descriptor_name = "bnet.protocol.channel.ChannelSubscriber";
  option (service_options).type = SERVICE_TYPE_RPC_DIRECT;
  option (sdk_service_options).inbound = true;
  
  rpc OnJoin (.bgs.protocol.channel.v1.JoinNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 1;
    option (method_options).handle_destination_unreachable = true;
  }
  
  rpc OnMemberAdded (.bgs.protocol.channel.v1.MemberAddedNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 2;
    option (method_options).legacy_fanout_replacement = "bgs.protocol.arcane.channel.LegacyFanoutNotificationReplacementV1";
  }
  
  rpc OnLeave (.bgs.protocol.channel.v1.LeaveNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 3;
  }
  
  rpc OnMemberRemoved (.bgs.protocol.channel.v1.MemberRemovedNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 4;
    option (method_options).legacy_fanout_replacement = "bgs.protocol.arcane.channel.LegacyFanoutNotificationReplacementV1";
  }
  
  rpc OnSendMessage (.bgs.protocol.channel.v1.SendMessageNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 5;
    option (method_options).legacy_fanout_replacement = "bgs.protocol.arcane.channel.LegacyFanoutNotificationReplacementV1";
  }
  
  rpc OnUpdateChannelState (.bgs.protocol.channel.v1.UpdateChannelStateNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 6;
    option (method_options).legacy_fanout_replacement = "bgs.protocol.arcane.channel.LegacyFanoutNotificationReplacementV1";
    option (method_options).handle_destination_unreachable = true;
  }
  
  rpc OnUpdateMemberState (.bgs.protocol.channel.v1.UpdateMemberStateNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (method_options).id = 7;
    option (method_options).legacy_fanout_replacement = "bgs.protocol.arcane.channel.LegacyFanoutNotificationReplacementV1";
  }
}
